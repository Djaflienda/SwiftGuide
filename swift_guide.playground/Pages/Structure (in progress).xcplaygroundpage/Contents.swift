//: [Previous](@previous)

import Foundation

// Отсюда и далее мы начнём во всю использовать всю мощь ООП (объектно-ориентированного программирования).

// В любом приложении всё состоит из объектов.
// Само приложение это ни что иной как объект состоящий из иных объектов.

// Что же такое Объект, спросите вы?
// Объект - это экземпляр Класса или Структуры. О классах мы повогорим на следующем занятии.
// А вот о Структураж ниже:

// =================================================================================
// =========================== Structure ===========================================
// =================================================================================

// Структура - это абстрактный тип данных, который может хранить в себе иные данные.
// В том числе и другие структуры.
// Если в двух словах, то: вы можете вынести определённый набор данных и поведения в отдельный объект
// и использовать его в любом месте приложения.

enum skillType {
  case passive, active, offensive
}

struct Monster {
  let name: String = "Lava Golem"
  var monsterHP: Int = 24324
}

struct Player {
  let skills: (String, skillType) = ("Iron Hand", .passive)
  let heroAtk: Int = 777
  
  mutating func takingDamage(monster: inout Monster, damage: Int) {
    monster.monsterHP -= damage
  }
}


var golem: Monster = Monster()
var player: Player = Player()

player.takingDamage(monster: &golem, damage: 21)

Monster()

// =================================================================================
// =========================== Методы ==============================================
// =================================================================================

// =================================================================================
// =========================== Конструкуторы =======================================
// =================================================================================

print("\n===========\n")
// =================================================================================
// =========================== Домашнее задание ====================================
// =================================================================================

//: [Next](@next)
