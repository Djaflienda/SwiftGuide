//: [Previous](@previous)

import Foundation

// Отсюда и далее мы начнём во всю использовать всю мощь ООП (объектно-ориентированного программирования).

// В любом приложении всё состоит из объектов.
// Само приложение - ни что иное как объект состоящий из иных объектов.

// Что же такое Объект, спросите вы?
// Объект - это экземпляр Класса или Структуры. О классах мы повогорим на следующем уроке,
// а вот о Структураж ниже:

// =================================================================================
// =========================== Structure ===========================================
// =================================================================================

// Структура - это абстрактный тип данных, который может хранить в себе иные данные.
// В том числе и другие структуры.
// Если в двух словах, то: вы можете вынести определённый набор данных и поведения в отдельный объект
// и использовать его в любом месте приложения. Структура по сути своей - это некий чертёж,
// по которому в дальнейшем вы можете создавать однотипные объекты с заранее заданными различиями.

enum skillType {
  case passive, active, offensive
}

/// Наш тестовый монстр
struct Monster {
  let name: String = "Lava Golem"
  var monsterHP: Int = 24324
}

/// Наш герой
struct Player {
  // Свойство структуры. По сути это та же переменная (или константа в нашем случае),
  // ограниченная лишь областью видимости.
  let skills: (String, skillType) = ("Iron Hand", .passive)
  let heroAtk: Int
  
  // В данном случае мы имеем действие что наносит определённый урон.
  // Так же стоит заметить, что мы передаём внутрь функции другую структуру по ссылке (inout)
  // Тем самым меняем сам передаваемый объект.
  /// Нанесение урона.
  /// - Parameter monster: Сам объект монстра
  /// - Parameter damage: Урон который наносит герой вышеуказанному монстру
  func takingDamage(monster: inout Monster, damage: Int) {
    monster.monsterHP -= damage
  }
}

var golem: Monster = Monster()
var player: Player = Player(heroAtk: 12478)

player.takingDamage(monster: &golem, damage: player.heroAtk)

// Как видите количество жизней у монстра уменьшилось.
golem.monsterHP

// =================================================================================
// =========================== Вычисляемые свойства ================================
// =================================================================================

/// Структура нашей случайной Каппы
struct Kapha {
  /// Уровень атаки (случайное число в диапазоне от 399 до 719)
  let atk: Int = Int(arc4random_uniform(720) + 399)
  /// Задержка между атаками
  let timeBetweenAttaks: Float = 2.01
  /// Урон в минуту
  var damagePerMinute: Float {
    get {
      // Стандартная формала расчёта урона в минуту
      return 50 / timeBetweenAttaks
    }
  }
}

let kapha = Kapha()
// Значение урона в минуту автоматически вычислилось благодаря заранее заданной формуле.
kapha.damagePerMinute

// =================================================================================
// =========================== Наблюдатели изменений ===============================
// =================================================================================



// =================================================================================
// =========================== Методы ==============================================
// =================================================================================

// =================================================================================
// =========================== Конструкуторы =======================================
// =================================================================================

print("\n===========\n")
// =================================================================================
// =========================== Домашнее задание ====================================
// =================================================================================

//: [Next](@next)
