//: [Previous](@previous)

import Foundation


// =================================================================================
// =========================== Class ===============================================
// =================================================================================

// Структуры и Классы во многом похожи. Однако существенные различия всё же есть. О них и поговорим ниже.

// =================================================================================
// =========================== Ссылочный тип =======================================
// =================================================================================

/// Пример Структуры
struct MoonlightDagger {
  var element: String
}

var fireDagger  = MoonlightDagger(element: "Fire")
var waterDagger = MoonlightDagger(element: "Water")

// Как видим - объекты имеют разные элементы, как это и было задумано.
print(fireDagger.element, waterDagger.element) // Fire Water

waterDagger = fireDagger
// Присвоим значение одного объекта другому и убедимся в том, что их значения теперь идентичны.
print(fireDagger.element, waterDagger.element) // Fire Fire

fireDagger.element = "Earth"
// Однако изменив значение у первого объекта - значение второго остаётся неизменным.
print(fireDagger.element, waterDagger.element) // Earth Fire

print("\n===========\n")

// Суть подобных преобразований заключается в том, что Структуры являются так называемым - Типом Значения.
// Это говорит о том, что в свойствах Структуры хранятся сами значения Структуры.
// После создания копии (waterDagger = fireDagger) мы лишь копируем значения одной Структуры в другую, при этом это всё ещё две разных Структуры, не смотря на их схожесть.

// В случае с же с Классами у нас всё несколько иначе.

/// Пример Класса
class Rapier {
  var element: String
  
  init(element: String) {
    self.element = element
  }
}

var windRapier  = Rapier(element: "Wind")
var earthRapier = Rapier(element: "Earth")

// Пока что разница между Структурой и классом не видна
print(windRapier.element, earthRapier.element) // Wind Earth

earthRapier = windRapier
// Присвоим значение одного объекта другому и убедимся в том, что их значения теперь идентичны.
print(windRapier.element, earthRapier.element) // Wind Wind

windRapier.element = "Water"

// Вот здесь мы уже виим разницу. Изменив значение одного объекта - так же изменился и другой.
// Это означает, что в переменной хранится не само значение, как в случае со Структурами, а лишь ссылка на него.
// Если в случае с копированием Стуруктур мы имели разные структуры, как клоны, то в Случае с Классами они становятся единым объектом с доступом к нему по ссылке.
print(windRapier.element, earthRapier.element) // Water Water

print("\n===========")

// =================================================================================
// =========================== Свойства и методы ===================================
// =================================================================================

/// Ножи, которые куёт кузнец
class Knife {
  static var count: Int = 0
  
  init() {
    Knife.count += 1
  }
}

let firstKnife  = Knife()
let secondKnife = Knife()
let thirdKnife  = Knife()

Knife.count

print("\n===========")

// =================================================================================
// =========================== Вспомогательный конструктор =========================
// =================================================================================

print("\n===========")

// =================================================================================
// =========================== Наследование ========================================
// =================================================================================

print("\n===========")

// =================================================================================
// =========================== Деиницилизация ======================================
// =================================================================================

print("\n===========")

// =================================================================================
// =========================== Домашнее задание ====================================
// =================================================================================
//: [Next](@next)
